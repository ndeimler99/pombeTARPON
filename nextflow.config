/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    TArPON Nextflow Config File
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/


//Global Default params
params {

    // required input
    run_name = "Run"
    input_file = "./data/test_fastq.fastq.gz"
    // fastq file input
    outdir = "./output"
    // out directory to write all files and statistics to
    overwrite_outdir = false
    sample_name = 'sample'
    sample_file = ""
    trace_dir = "${params.outdir}/pipeline_info"
    demuxed = false
    nanopore_barcodes = false
    

    //putative telomeric read isolation
    repeat_count = 4 //number of repeats that must be present in read to isolate as putative telomeric
    reverse_complement_threshold = 0.8

    //adaptor sequence analysis
    // ACTTCGTTCGGT
    adaptor_sequence = '' //default duplex capture sequence to use
    adaptor_sequence_errors = 2 //number of errors to allow for fuzzy match to adaptor_sequence
    barcode_errors = 3
    //subtelomeric filtering
    min_subtelo_length = 300 // length of subtelomeric read that must contain fewer one nucleotide variant repeats than subtelo_threshold
    subtelo_threshold = 0.3 // percentage of first min_subtelo_length that must not be one nucleotide variant repeats for read to be considered for down stream analysis

    //Stats and output
    strand_comparison = false //direct comparison between C and G strand_comparison

    help = false
    version = false

    wf{
        example_cmd = [
            "--input_file 'test_data/*.fastq' --sample_file 'test_data/test_data.csv'"
        ]
    }

    schema_ignore_params = 'help,version,wf,trace_dir,real_time'
}

docker_hub {
    // Dockerhub repository to use
    repo = 'ndeimler99'
}

// This defines the container to use for each submodule based on the labels
// TODO: Change the container paths to "${docker_hub.repo}/imagename:${docker_hub.imagename_tag}"
process {
    withLabel:tarpon {
        container = "${docker_hub.repo}/tarpon:latest"
    }

    withLabel:basecalling {
        container = "ontresearch/dorado:sha8bc19cc3c78c1ce847fbf4a879cad997b7e8c430"
    }
    
    withLabel:gpu {
        maxForks = 1
    }
}

plugins {
  id 'nf-schema@2.0.0'
}

// Configuration profiles (should be extended by docker profile and optimised for the various run envionments)
profiles {
    conda {
        conda.enabled = true
    }

    // the "standard" profile is used implicitely by nextflow
    // if no other profile is given on the CLI
    standard {
        docker {
            enabled = true
            // this ensures container is run as host user and group, but
            //    also adds host user to the within-container group
            runOptions = "--user \$(id -u):\$(id -g) --group-add 100"
        }
    }

    process."withLabel:gpu".containerOptions = "--gpus all"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    overwrite = true
    file    = "${params.trace_dir}/execution_timeline.html"
}
report {
    enabled = true
    overwrite = true
    file    = "${params.trace_dir}/execution_report.html"
}
trace {
    enabled = true
    overwrite = true
    file    = "${params.trace_dir}/execution_trace.txt"
}
dag {
    enabled = true
    overwrite = true
    file    = "${params.trace_dir}/pipeline_dag.html"
}

// Function to ensure that resource requirements don't exceed the limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}

manifest {
    name            = 'ndeimler99/TArPON'
    author          = """Nathaniel Deimler"""
    homePage        = 'https://github.com/ndeimler99/TArPON'
    description     = """A pipeline to Analyze Telomeric sequences from Nanopore Sequencing"""
    mainScript      = 'main.nf'
    nextflowVersion = '24.04.3'
    version         = '0.1.0'
    doi             = ''
}
