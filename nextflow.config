/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    TArPON Nextflow Config File
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/


//Global Default params
params {

    // required input
    run_name = "Run"
    input = "./data/test_fastq.fastq.gz"
    // fastq file input
    outdir = "./output"
    // out directory to write all files and statistics to
    overwrite_outdir = false
    sample_name = 'sample'
    sample_file = ""
    trace_dir = "${params.outdir}/pipeline_info"
    demuxed = false
    nanopore_barcodes = false

    //alignment
    pombe_genome = "./data/Schizosaccharomyces_pombe.ASM294v2.dna.toplevel.fa.gz"

    //isolation parameters and reverse complementation
    read_fragment_length = 1000 //from start to this number and from end-this number to end wil be searched for at least repeat_count occurences of repeat_sequence
    repeat = "GGTTAC"
    repeat_count = 3
    minimum_strand_percentage = 30 // % of G strand / G strand + C strand that must not be exceeded for the read to be considered C strand

    //telo start and end parameters
    canonical_start = "GGGTTACAAGGTTACG"
    canonical_start_errors = 3
    telo_end_repeat_count = 2
    telo_end_error_count = 2
    telo_start_repeat_count = 4
    telo_start_error_count = 4


    //blast and meshclust analysis
    rDNA_TAS_file = "./data/TAS.rDNA.fa"
    cluster_plot_width = 20000
    TAS1_TAS3_percent_identity = 95
    TAS2_percent_identity = 85
    TAS_length_fraction = 0.85
    cluster_telo_length = 5000
    cluster_similarity_threshold = 0.95
    image_width_px = 1500
    image_height_px = 800
    minimum_cluster_size = 10

    //Consensus Sequence Generation
    alignment_percentage = 70
    consensus = false
    





    //adaptor sequence analysis
    capture_probe_sequence = false //default duplex capture sequence to use
    capture_probe_sequence_errors = 2 //number of errors to allow for fuzzy match to adaptor_sequence
    barcode_errors = 3



    help = false
    version = false

    wf{
        example_cmd = [
            "--input_file 'test_data/*.fastq' --sample_file 'test_data/test_data.csv'"
        ]
    }

    schema_ignore_params = 'help,version,wf,trace_dir'
}

docker_hub {
    // Dockerhub repository to use
    repo = 'ndeimler99'
}

// This defines the container to use for each submodule based on the labels
// TODO: Change the container paths to "${docker_hub.repo}/imagename:${docker_hub.imagename_tag}"
process {
    withLabel:pombeTARPON {
        container = "${docker_hub.repo}/pombe-tarpon:latest"
    }

    withLabel:basecalling {
        container = "ontresearch/dorado:sha8bc19cc3c78c1ce847fbf4a879cad997b7e8c430"
    }
    withLabel:pycairo {
        container = "${docker_hub.repo}/pycairo:latest"
    }
    withLabel:meshclust {
        container = "${docker_hub.repo}/meshclust"
    }
    withLabel:gpu {
        maxForks = 1
    }
}

plugins {
  id 'nf-schema@2.0.0'
}

// Configuration profiles (should be extended by docker profile and optimised for the various run envionments)
profiles {
    conda {
        conda.enabled = true
    }

    // the "standard" profile is used implicitely by nextflow
    // if no other profile is given on the CLI
    standard {
        docker {
            enabled = true
            // this ensures container is run as host user and group, but
            //    also adds host user to the within-container group
            runOptions = "--user \$(id -u):\$(id -g) --group-add 100"
        }
    }

    process."withLabel:gpu".containerOptions = "--gpus all"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    overwrite = true
    file    = "${params.trace_dir}/execution_timeline.html"
}
report {
    enabled = true
    overwrite = true
    file    = "${params.trace_dir}/execution_report.html"
}
trace {
    enabled = true
    overwrite = true
    file    = "${params.trace_dir}/execution_trace.txt"
}
dag {
    enabled = true
    overwrite = true
    file    = "${params.trace_dir}/pipeline_dag.html"
}

// Function to ensure that resource requirements don't exceed the limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}

manifest {
    name            = 'ndeimler99/TArPON'
    author          = """Nathaniel Deimler"""
    homePage        = 'https://github.com/ndeimler99/TArPON'
    description     = """A pipeline to Analyze Telomeric sequences from Nanopore Sequencing"""
    mainScript      = 'main.nf'
    nextflowVersion = '24.04.3'
    version         = '0.1.0'
    doi             = ''
}
